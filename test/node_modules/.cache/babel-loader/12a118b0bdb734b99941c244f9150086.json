{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport qs from \"qs\";\nexport default {\n  name: \"NewLogin\",\n  data: function data() {\n    return {\n      form: {\n        username: '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    login: function login() {\n      var _this = this;\n\n      // 检查表单是否有填写内容\n      if (this.form.username === '' || this.form.password === '') {\n        this.$message.warning(\"请输入用户名和密码！\");\n        return;\n      }\n\n      this.$axios({\n        method: 'post',\n\n        /* 指明请求方式，可以是 get 或 post */\n        url: '/user/login',\n\n        /* 指明后端 api 路径，由于在 main.js 已指定根路径，因此在此处只需写相对路由 */\n        data: qs.stringify({\n          /* 需要向后端传输的数据，此处使用 qs.stringify 将 json 数据序列化以发送后端 */\n          username: this.form.username,\n          password: this.form.password\n        })\n      }).then(function (res) {\n        /* res 是 response 的缩写 */\n        switch (res.data.status_code) {\n          case 200:\n            _this.$message.success(\"登录成功！\");\n            /* 将后端返回的 user 信息使用 vuex 存储起来 */\n\n\n            _this.$store.dispatch('saveUserInfo', {\n              user: {\n                'username': res.data.username,\n                'token': res.data.token,\n                'userId': res.data.user_id\n              }\n            });\n            /* 从 localStorage 中读取 preRoute 键对应的值 */\n\n\n            var history_pth = localStorage.getItem('preRoute');\n            /* 若保存的路由为空或为注册路由，则跳转首页；否则跳转前路由（setTimeout表示1000ms后执行） */\n\n            setTimeout(function () {\n              if (history_pth == null || history_pth === '/register') {\n                _this.$router.push('/');\n              } else {\n                _this.$router.push({\n                  path: history_pth\n                });\n              }\n            }, 1000);\n            break;\n\n          case 401:\n            _this.$message.error(\"用户名不存在！\");\n\n            break;\n\n          case 402:\n            _this.$message.error(\"密码错误！\");\n\n            break;\n        }\n      }).catch(function (err) {\n        console.log(err);\n        /* 若出现异常则在终端输出相关信息 */\n      });\n    },\n    toRegister: function toRegister() {\n      // 跳转注册的路由\n      this.$router.push('/register');\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;EACAA,gBADA;EAEAC,IAFA,kBAEA;IACA;MACAC;QACAC,YADA;QAEAC;MAFA;IADA;EAMA,CATA;EAUAC;IACAC;MAAA;;MACA;MACA;QACA;QACA;MACA;;MAEA;QACAC,cADA;;QACA;QACAC,kBAFA;;QAEA;QACAP;UAAA;UACAE,4BADA;UAEAC;QAFA;MAHA,GAQAK,IARA,CAQA;QAAA;QACA;UACA;YACA;YACA;;;YACA;cACAC;gBACA,6BADA;gBAEA,uBAFA;gBAGA;cAHA;YADA;YAQA;;;YACA;YACA;;YACAC;cACA;gBACA;cACA,CAFA,MAEA;gBACA;kBAAAC;gBAAA;cACA;YACA,CANA,EAMA,IANA;YAOA;;UACA;YACA;;YACA;;UACA;YACA;;YACA;QA5BA;MA8BA,CAvCA,EAwCAC,KAxCA,CAwCA;QACAC;QAAA;MACA,CA1CA;IA2CA,CAnDA;IAoDAC;MACA;MACA;IACA;EAvDA;AAVA","names":["name","data","form","username","password","methods","login","method","url","then","user","setTimeout","path","catch","console","toRegister"],"sourceRoot":"src/views","sources":["Register.vue"],"sourcesContent":["<template>\r\n  <div id=\"login\" class=\"login\">\r\n    <img class=\"bgbox\" id=\"bgbox\" alt=\"\" src=\"../../src/assets/F@R{9RPYW23(NP44$S1O(7L.gif\">\r\n    <div class=\"wrap\" style=\"width:400px;height:1000px;margin:100px auto;text-align:center\">\r\n      <h1>注册用户</h1>\r\n      <el-form :model=\"form\" ref=\"form\" class=\"form\">\r\n        <el-form-item prop=\"username\">\r\n          <el-input placeholder=\"用户名\" type=\"username\" v-model=\"form.username\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"useremail\">\r\n          <el-input placeholder=\"邮箱\" type=\"useremail\" v-model=\"form.useremail autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item id=\"password\" prop=\"password\">\r\n          <el-input\r\n              placeholder=\"密码\"\r\n              show-password\r\n              type=\"password\"\r\n              v-model=\"form.password\"\r\n              autocomplete=\"off\"\r\n              @keyup.enter.native=\"login\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item id=\"password\" prop=\"password\">\r\n          <el-input\r\n              placeholder=\"密码\"\r\n              show-password\r\n              type=\"password\"\r\n              v-model=\"form.password\"\r\n              autocomplete=\"off\"\r\n              @keyup.enter.native=\"login\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item class=\"btn_login\">\r\n          <el-button type=\"primary\" @click=\"login\">注&nbsp;&nbsp;册</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div class=\"suffix\">\r\n        <p @click=\"toRegister\">注册帐号</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport qs from \"qs\";\r\nexport default {\r\n  name: \"NewLogin\",\r\n  data() {\r\n    return {\r\n      form: {\r\n        username: '',\r\n        password: '',\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    login: function () {\r\n      // 检查表单是否有填写内容\r\n      if (this.form.username === '' || this.form.password === '') {\r\n        this.$message.warning(\"请输入用户名和密码！\");\r\n        return;\r\n      }\r\n\r\n      this.$axios({\r\n        method: 'post',           /* 指明请求方式，可以是 get 或 post */\r\n        url: '/user/login',       /* 指明后端 api 路径，由于在 main.js 已指定根路径，因此在此处只需写相对路由 */\r\n        data: qs.stringify({      /* 需要向后端传输的数据，此处使用 qs.stringify 将 json 数据序列化以发送后端 */\r\n          username: this.form.username,\r\n          password: this.form.password\r\n        })\r\n      })\r\n      .then(res => {              /* res 是 response 的缩写 */\r\n        switch (res.data.status_code) {\r\n          case 200:\r\n            this.$message.success(\"登录成功！\");\r\n            /* 将后端返回的 user 信息使用 vuex 存储起来 */\r\n            this.$store.dispatch('saveUserInfo', {\r\n              user: {\r\n                'username': res.data.username,\r\n                'token': res.data.token,\r\n                'userId': res.data.user_id\r\n              }\r\n            });\r\n\r\n            /* 从 localStorage 中读取 preRoute 键对应的值 */\r\n            const history_pth = localStorage.getItem('preRoute');\r\n            /* 若保存的路由为空或为注册路由，则跳转首页；否则跳转前路由（setTimeout表示1000ms后执行） */\r\n            setTimeout(() => {\r\n              if (history_pth == null || history_pth === '/register') {\r\n                this.$router.push('/');\r\n              } else {\r\n                this.$router.push({ path: history_pth });\r\n              }\r\n            }, 1000);\r\n            break;\r\n          case 401:\r\n            this.$message.error(\"用户名不存在！\");\r\n            break;\r\n          case 402:\r\n            this.$message.error(\"密码错误！\");\r\n            break;\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);         /* 若出现异常则在终端输出相关信息 */\r\n      })\r\n    },\r\n    toRegister: function () {\r\n      // 跳转注册的路由\r\n      this.$router.push('/register');\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#login {\r\n  font-family: 'Noto Serif SC', serif;\r\n  margin-top: 60px;\r\n}\r\n#login >>> .el-input__inner {\r\n  font-family: 'Noto Serif SC', serif;\r\n}\r\n#login .bgbox {\r\n  display: block;\r\n  opacity: 1;\r\n  z-index: -3;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: opacity 1s,transform .25s,filter .25s;\r\n  backface-visibility: hidden;\r\n}\r\n#login .logo {\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  height: 150px;\r\n}\r\n#login .wrap {\r\n  width: 300px;\r\n  height: 315px;\r\n  padding: 0 25px 0 25px;\r\n  line-height: 40px;\r\n  position: relative;\r\n  display: inline-block;\r\n  background-color: rgba(255, 255, 255, 0.85);\r\n  border-radius: 20px;\r\n}\r\n#login .btn_login {\r\n  margin-top: 25px;\r\n  text-align: center;\r\n}\r\n#login .btn_login button{\r\n  line-height: 10px;\r\n  font-family: 'Noto Serif SC', serif;\r\n  width: 100%;\r\n  height: 38px;\r\n}\r\n#login .suffix {\r\n  font-size:14px;\r\n  line-height:10px;\r\n  color:#999;\r\n  cursor: pointer;\r\n  float:right;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}