{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Login\",\n  data: function data() {\n    return {\n      username: '',\n      password: ''\n    };\n  },\n  methods: {\n    click_login: function click_login() {\n      var _this = this;\n\n      this.$axios({\n        method: 'post',\n\n        /* 指明请求方式，可以是 get 或 post */\n        url: '/user/login',\n\n        /* 指明后端 api 路径，由于在 main.js 已指定根路径，因此在此处只需写相对路由 */\n        data: {\n          /* 需要向后端传输的数据，JSON 格式 */\n          username: this.username,\n          password: this.password\n        }\n      }).then(function (res) {\n        /* res 是 response 的缩写 */\n        switch (res.data.status_code) {\n          case 200:\n            window.alert(\"登录成功！\");\n            /* 将后端返回的 user 信息使用 vuex 存储起来 */\n\n            _this.$store.dispatch('saveUserInfo', {\n              user: {\n                'username': res.data.username,\n                'token': res.data.token,\n                'userId': res.data.user_id\n              }\n            });\n            /* 从 localStorage 中读取 preRoute 键对应的值 */\n\n\n            var history_pth = localStorage.getItem('preRoute');\n            /* 若保存的路由为空或为注册路由，则跳转首页；否则跳转前路由（setTimeout表示1000ms后执行） */\n\n            setTimeout(function () {\n              if (history_pth == null || history_pth === '/register') {\n                _this.$router.push('/');\n              } else {\n                _this.$router.push({\n                  path: history_pth\n                });\n              }\n            }, 1000);\n            break;\n\n          case 401:\n            window.alert(\"用户名不存在！\");\n            break;\n\n          case 402:\n            window.alert(\"密码错误！\");\n            break;\n        }\n      }).catch(function (err) {\n        console.log(err);\n        /* 若出现异常则在终端输出相关信息 */\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;AAYA;EACAA,aADA;EAEAC,IAFA,kBAEA;IACA;MACAC,YADA;MAEAC;IAFA;EAIA,CAPA;EAQAC;IACAC,WADA,yBACA;MAAA;;MACA;QACAC,cADA;;QACA;QACAC,kBAFA;;QAEA;QACAN;UAAA;UACAC,uBADA;UAEAC;QAFA;MAHA,GAQAK,IARA,CAQA;QAAA;QACA;UACA;YACAC;YACA;;YACA;cACAC;gBACA,6BADA;gBAEA,uBAFA;gBAGA;cAHA;YADA;YAOA;;;YACA;YACA;;YACAC;cACA;gBACA;cACA,CAFA,MAEA;gBACA;kBAAAC;gBAAA;cACA;YACA,CANA,EAMA,IANA;YAOA;;UACA;YACAH;YACA;;UACA;YACAA;YACA;QA3BA;MA6BA,CAtCA,EAuCAI,KAvCA,CAuCA;QACAC;QAAA;MACA,CAzCA;IA0CA;EA5CA;AARA","names":["name","data","username","password","methods","click_login","method","url","then","window","user","setTimeout","path","catch","console"],"sourceRoot":"src/views","sources":["Newlogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <form class=\"form-box\">\r\n      <h1>Login</h1>\r\n      <label><input v-model=\"username\" type=\"text\" placeholder=\"Username\" class=\"username\"></label>\r\n      <label><input v-model=\"password\" type=\"password\" placeholder=\"Password\" class=\"password\"></label>\r\n      <button type=\"submit\" @click=\"click_login\" class=\"login\">Login</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: ''\r\n    }\r\n  },\r\n  methods: {\r\n    click_login() {\r\n      this.$axios({\r\n        method: 'post',           /* 指明请求方式，可以是 get 或 post */\r\n        url: '/user/login',       /* 指明后端 api 路径，由于在 main.js 已指定根路径，因此在此处只需写相对路由 */\r\n        data: {                   /* 需要向后端传输的数据，JSON 格式 */\r\n          username: this.username,\r\n          password: this.password\r\n        }\r\n      })\r\n      .then(res => {              /* res 是 response 的缩写 */\r\n        switch (res.data.status_code) {\r\n          case 200:\r\n            window.alert(\"登录成功！\");\r\n            /* 将后端返回的 user 信息使用 vuex 存储起来 */\r\n            this.$store.dispatch('saveUserInfo', {\r\n              user: {\r\n                'username': res.data.username,\r\n                'token': res.data.token,\r\n                'userId': res.data.user_id\r\n              }\r\n            });\r\n            /* 从 localStorage 中读取 preRoute 键对应的值 */\r\n            const history_pth = localStorage.getItem('preRoute');\r\n            /* 若保存的路由为空或为注册路由，则跳转首页；否则跳转前路由（setTimeout表示1000ms后执行） */\r\n            setTimeout(() => {\r\n              if (history_pth == null || history_pth === '/register') {\r\n                this.$router.push('/');\r\n              } else {\r\n                this.$router.push({ path: history_pth });\r\n              }\r\n            }, 1000);\r\n            break;\r\n          case 401:\r\n            window.alert(\"用户名不存在！\");\r\n            break;\r\n          case 402:\r\n            window.alert(\"密码错误！\");\r\n            break;\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);         /* 若出现异常则在终端输出相关信息 */\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.form-box {\r\n  width: 300px;\r\n  padding: 40px;  /* 内边界宽度  */\r\n  position: absolute;  /* 设置为绝对定位，使下方的top和left生效  */\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%,-50%);  /* 作用见后方描述  */\r\n  background: #90b9e5;  /* 设置背景颜色  */\r\n  text-align: center;  /* 表单中内容居中  */\r\n  border-radius: 10px;\r\n}\r\n.form-box h1 {\r\n  text-transform: uppercase;  /* 将字体全部设置成大写字母  */\r\n}\r\n/* 设置用户名输入框和密码输入框样式 */\r\n.form-box .username, .form-box .password {\r\n  border-radius: 24px;  /* 边框四个角的弧度  */\r\n  border: 2px solid #3498db;  /* 边框厚度  */\r\n  background: none;\r\n  display: block;\r\n  margin: 20px auto;  /* 外边界  */\r\n  text-align: center;\r\n  padding: 14px 10px;  /* 内边界  */\r\n  width: 200px;\r\n  outline: none;\r\n  color: white;     /* 设置输入框中竖线的颜色 */\r\n  transition: 0.25s;   /* 设置元素过渡效果 */\r\n}\r\n/* 设置文本框获得焦点时的样式 */\r\n.form-box .username:focus,.form-box .password:focus{\r\n  border-color: #2ecc71;\r\n}\r\n/* 设置提交按钮的样式 */\r\n.form-box .login{\r\n  border-radius: 24px;\r\n  border: 2px solid #0b95f1;\r\n  background: none;\r\n  display: block;\r\n  margin: 20px auto;\r\n  padding: 14px 40px;\r\n  outline: none;\r\n  transition: 0.25s;\r\n  cursor: pointer;    /* 设置光标的样式 */\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}